{"version":3,"sources":["auth.js"],"names":["router","require","Router","User","post","req","res","salt","hashedPassword","newUser","user","regeneratorRuntime","async","_context","prev","next","awrap","bcrypt","genSalt","sent","hash","body","password","username","email","save","status","json","t0","stop","_context2","findOne","compare"],"mappings":"aAAA,IAAMA,OAASC,QAAQ,WAAWC,SAC5BC,KAAOF,QAAQ,kBADfD,OAASC,QAAQ,UAKvBD,OAAOI,KAAK,YAAc,SAAOC,EAAKC,GAAZ,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAAAC,OAAAC,QAAA,KAAA,KAAA,EAAA,OAAAX,EAAAM,EAAAM,KAAAN,EAAAE,KAAA,EAAAJ,mBAAAK,MAAAC,OAAAG,KAAAf,EAAAgB,KAAAC,SAAAf,IAAA,KAAA,EAAA,OAAAC,EAAAK,EAAAM,KAAAN,EAAAE,KAAA,EAAAJ,mBAAAK,MAAA,IAAAb,KAAA,CAAAoB,SAAAlB,EAAAgB,KAAAE,SAAAC,MAAAnB,EAAAgB,KAAAG,MAadF,SAAUd,KAbI,KAAA,EAAA,OAAAC,EAAAI,EAAAM,KAAAN,EAAAE,KAAA,GAAAJ,mBAAAK,MAkBCP,EAAQgB,QAlBT,KAAA,GAkBZf,EAlBYG,EAAAM,KAAAb,EAAAoB,OAAA,KAAAC,KAAAjB,GAAAG,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAe,GAAAf,EAAA,MAAA,GAAAP,EAAAoB,OAAA,KAAAC,KAAAd,EAAAe,IAAA,KAAA,GAAA,IAAA,MAAA,OAAAf,EAAAgB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,QAAA7B,OAAAI,KAAA,SAAA,SAAAC,EAAAC,GAAA,IAAAI,EAAA,OAAAC,mBAAAC,MAAA,SAAAkB,GAAA,OAAA,OAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,KAAA,EAAA,OAAAe,EAAAhB,KAAA,EAAAgB,EAAAf,KAAA,EAAAJ,mBAAAK,MAAAb,KAAA4B,QAAA,CAAAP,MAAAnB,EAAAgB,KAAAG,SAAA,KAAA,EAAA,OAAAd,EAAAoB,EAAAX,OAAAb,EAAAoB,OAAA,KAAAC,KAAA,mBAAAG,EAAAf,KAAA,EAAAJ,mBAAAK,MAAAC,OAAAe,QAAA3B,EAAAgB,KAAAC,SAAAZ,EAAAY,WAAA,KAAA,EAAAQ,EAAAX,MAAAb,EAAAoB,OAAA,KAAAC,KAAA,qBAAArB,EAAAoB,OAAA,KAAAC,KAAAjB,GAAAoB,EAAAf,KAAA,GAAA,MAAA,KAAA,GAAAe,EAAAhB,KAAA,GAAAgB,EAAAF,GAAAE,EAAA,MAAA,GAsClBxB,EAAIoB,OAAO,KAAKC,KAAhBG,EAAAF,IAtCkB,KAAA,GAAA,IAAA,MAAA,OAAAE,EAAAD,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,QAqBlBvB,OAAAA,QAAIoB","file":"auth.min.js","sourcesContent":["const router = require(\"express\").Router();\r\nconst User = require(\"../models/User\");\r\nconst bcrypt = require('bcrypt');\r\n\r\n//register user\r\nrouter.post(\"/register\",  async (req, res)=>{\r\n    \r\n\r\n    try {\r\n\r\n        //generate new password\r\n        const salt = await bcrypt.genSalt(10);\r\n        const hashedPassword = await bcrypt.hash(req.body.password, salt);\r\n\r\n        //creating new user\r\n        const newUser = await new User({\r\n            username: req.body.username,\r\n            email: req.body.email,\r\n            password: hashedPassword,\r\n    \r\n        });\r\n\r\n        //saving the user \r\n        const user = await newUser.save();\r\n        res.status(200).json(user);\r\n    } catch (err) {\r\n        res.status(500).json(err);\r\n    }\r\n\r\n});\r\n\r\n//login\r\n\r\nrouter.post('/login', async (req, res) =>{\r\n    try {\r\n    const user = await User.findOne({email: req.body.email});\r\n    !user && res.status(404).json(\"User not found.\");\r\n\r\n    const validPassword = await bcrypt.compare(req.body.password, user.password)\r\n    !validPassword && res.status(404).json(\"Invalid Password.\");\r\n\r\n    res.status(200).json(user);\r\n    } catch (err) {\r\n        res.status(500).json(err);\r\n    }\r\n})\r\n\r\nmodule.exports = router;"]}