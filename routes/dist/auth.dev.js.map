{"version":3,"sources":["auth.js"],"names":["router","require","Router","User","bcrypt","post","req","res","genSalt","salt","hash","body","password","hashedPassword","username","email","newUser","save","user","status","json","findOne","compare","validPassword","module","exports"],"mappings":";;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBC,MAAnB,EAAf;;AACA,IAAMC,IAAI,GAAGF,OAAO,CAAC,gBAAD,CAApB;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB,C,CAEA;;;AACAD,MAAM,CAACK,IAAP,CAAY,WAAZ,EAA0B,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAMCH,MAAM,CAACI,OAAP,CAAe,EAAf,CAND;;AAAA;AAMZC,UAAAA,IANY;AAAA;AAAA,0CAOWL,MAAM,CAACM,IAAP,CAAYJ,GAAG,CAACK,IAAJ,CAASC,QAArB,EAA+BH,IAA/B,CAPX;;AAAA;AAOZI,UAAAA,cAPY;AAAA;AAAA,0CAUI,IAAIV,IAAJ,CAAS;AAC3BW,YAAAA,QAAQ,EAAER,GAAG,CAACK,IAAJ,CAASG,QADQ;AAE3BC,YAAAA,KAAK,EAAET,GAAG,CAACK,IAAJ,CAASI,KAFW;AAG3BH,YAAAA,QAAQ,EAAEC;AAHiB,WAAT,CAVJ;;AAAA;AAUZG,UAAAA,OAVY;AAAA;AAAA,0CAkBCA,OAAO,CAACC,IAAR,EAlBD;;AAAA;AAkBZC,UAAAA,IAlBY;AAmBlBX,UAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,IAArB;AAnBkB;AAAA;;AAAA;AAAA;AAAA;AAqBlBX,UAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;;AArBkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B,E,CA0BA;;AAEApB,MAAM,CAACK,IAAP,CAAY,QAAZ,EAAsB,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAECJ,IAAI,CAACkB,OAAL,CAAa;AAACN,YAAAA,KAAK,EAAET,GAAG,CAACK,IAAJ,CAASI;AAAjB,WAAb,CAFD;;AAAA;AAEZG,UAAAA,IAFY;AAGlB,WAACA,IAAD,IAASX,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,iBAArB,CAAT;AAHkB;AAAA,0CAKUhB,MAAM,CAACkB,OAAP,CAAehB,GAAG,CAACK,IAAJ,CAASC,QAAxB,EAAkCM,IAAI,CAACN,QAAvC,CALV;;AAAA;AAKZW,UAAAA,aALY;AAMlB,WAACA,aAAD,IAAkBhB,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,mBAArB,CAAlB;AAEAb,UAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,IAArB;AARkB;AAAA;;AAAA;AAAA;AAAA;AAUdX,UAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;;AAVc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB;AAcAI,MAAM,CAACC,OAAP,GAAiBzB,MAAjB","sourcesContent":["const router = require(\"express\").Router();\r\nconst User = require(\"../models/User\");\r\nconst bcrypt = require('bcrypt');\r\n\r\n//register user\r\nrouter.post(\"/register\",  async (req, res)=>{\r\n    \r\n\r\n    try {\r\n\r\n        //generate new password\r\n        const salt = await bcrypt.genSalt(10);\r\n        const hashedPassword = await bcrypt.hash(req.body.password, salt);\r\n\r\n        //creating new user\r\n        const newUser = await new User({\r\n            username: req.body.username,\r\n            email: req.body.email,\r\n            password: hashedPassword,\r\n    \r\n        });\r\n\r\n        //saving the user \r\n        const user = await newUser.save();\r\n        res.status(200).json(user);\r\n    } catch (err) {\r\n        res.status(500).json(err);\r\n    }\r\n\r\n});\r\n\r\n//login\r\n\r\nrouter.post('/login', async (req, res) =>{\r\n    try {\r\n    const user = await User.findOne({email: req.body.email});\r\n    !user && res.status(404).json(\"User not found.\");\r\n\r\n    const validPassword = await bcrypt.compare(req.body.password, user.password)\r\n    !validPassword && res.status(404).json(\"Invalid Password.\");\r\n\r\n    res.status(200).json(user);\r\n    } catch (err) {\r\n        res.status(500).json(err);\r\n    }\r\n})\r\n\r\nmodule.exports = router;"],"file":"auth.dev.js"}