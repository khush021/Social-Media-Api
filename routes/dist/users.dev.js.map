{"version":3,"sources":["users.js"],"names":["User","require","router","Router","bcrypt","put","req","res","body","userId","params","id","isAdmin","password","genSalt","salt","hash","status","json","err","findByIdAndUpdate","$set","user","findByIdAndDelete","get","query","username","findById","findOne","_doc","updatedAt","other","Promise","all","followings","map","friendId","friends","friendList","friend","_id","profilePicture","push","currentUser","followers","includes","updateOne","$push","$pull","module","exports"],"mappings":"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","sourcesContent":["const User = require(\"../models/User\");\r\nconst router = require(\"express\").Router();\r\nconst bcrypt = require(\"bcrypt\")\r\n\r\n//update user\r\nrouter.put(\"/:id\", async(req, res) =>{\r\n    if(req.body.userId == req.params.id || req.body.isAdmin){\r\n\r\n        if(req.body.password){\r\n            try {\r\n                const salt = await bcrypt.genSalt(10);\r\n                req.body.password = await bcrypt.hash(req.body.password, salt);\r\n            } catch (error) {\r\n                return res.status(500).json(err);\r\n            }\r\n        }\r\n\r\n        try {\r\n            const user = await User.findByIdAndUpdate(req.params.id, {\r\n                $set: req.body,\r\n            });\r\n            res.status(200).json(\"Account has been updated.\")\r\n        } catch (err) {\r\n            return res.status(500).json(err);\r\n        }\r\n    }else{\r\n        return res.status(403).json(\"You cannot update this account because you are not the admin\");\r\n    }\r\n});\r\n//delete user\r\nrouter.delete(\"/:id\", async(req, res) =>{\r\n    if(req.body.userId == req.params.id || req.body.isAdmin){\r\n\r\n        if(req.body.password){\r\n            try {\r\n                const salt = await bcrypt.genSalt(10);\r\n                req.body.password = await bcrypt.hash(req.body.password, salt);\r\n            } catch (error) {\r\n                return res.status(500).json(err);\r\n            }\r\n        }\r\n\r\n        try {\r\n            const user = await User.findByIdAndDelete(req.params.id);\r\n            res.status(200).json(\"Account has been deleted successfully.\")\r\n        } catch (err) {\r\n            return res.status(500).json(err);\r\n        }\r\n    }else{\r\n        return res.status(403).json(\"You cannot delete this account because you are not the admin\");\r\n    }\r\n})\r\n//get a particular user\r\nrouter.get(\"/\", async(req, res) =>{\r\n  const userId = req.query.userId;\r\n  const username = req.query.username;\r\n\r\n    try {\r\n        const user = userId ? await User.findById(userId): await User.findOne({username: username});\r\n        const {password, updatedAt, ...other} = user._doc\r\n        res.status(200).json(other);\r\n    } catch (err) {\r\n        res.status(500).json(err);\r\n    }\r\n});\r\n\r\n//get friends\r\nrouter.get(\"/friends/:userId\", async (req, res) => {\r\n  try {\r\n    const user = await User.findById(req.params.userId);\r\n    const friends = await Promise.all(\r\n      user.followings.map((friendId) => {\r\n        return User.findById(friendId);\r\n      })\r\n    );\r\n    let friendList = [];\r\n    friends.map((friend) => {\r\n      const { _id, username, profilePicture } = friend;\r\n      friendList.push({ _id, username, profilePicture });\r\n    });\r\n    res.status(200).json(friendList)\r\n  } catch (err) {\r\n    res.status(500).json(err);\r\n  }\r\n});\r\n//follow a user\r\n//follow a user\r\n\r\nrouter.put(\"/:id/follow\", async (req, res) => {\r\n  if (req.body.userId !== req.params.id) {\r\n    try {\r\n      const user = await User.findById(req.params.id);\r\n      const currentUser = await User.findById(req.body.userId);\r\n      if (!user.followers.includes(req.body.userId)) {\r\n        await user.updateOne({ $push: { followers: req.body.userId } });\r\n        await currentUser.updateOne({ $push: { followings: req.params.id } });\r\n        res.status(200).json(\"user has been followed\");\r\n      } else {\r\n        res.status(403).json(\"you allready follow this user\");\r\n      }\r\n    } catch (err) {\r\n      res.status(500).json(err);\r\n    }\r\n  } else {\r\n    res.status(403).json(\"you cant follow yourself\");\r\n  }\r\n});\r\n\r\n//unfollow a user\r\n\r\nrouter.put(\"/:id/unfollow\", async (req, res) => {\r\n  if (req.body.userId !== req.params.id) {\r\n    try {\r\n      const user = await User.findById(req.params.id);\r\n      const currentUser = await User.findById(req.body.userId);\r\n      if (user.followers.includes(req.body.userId)) {\r\n        await user.updateOne({ $pull: { followers: req.body.userId } });\r\n        await currentUser.updateOne({ $pull: { followings: req.params.id } });\r\n        res.status(200).json(\"user has been unfollowed\");\r\n      } else {\r\n        res.status(403).json(\"you dont follow this user\");\r\n      }\r\n    } catch (err) {\r\n      res.status(500).json(err);\r\n    }\r\n  } else {\r\n    res.status(403).json(\"you cant unfollow yourself\");\r\n  }\r\n});\r\nmodule.exports = router"],"file":"users.dev.js"}