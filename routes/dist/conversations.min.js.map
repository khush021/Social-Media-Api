{"version":3,"sources":["conversations.js"],"names":["router","require","Router","Conversation","res","newConversation","savedConversation","regeneratorRuntime","async","_context","prev","next","members","req","body","senderId","receiverId","awrap","save","sent","status","json","t0","stop","get","conversation","_context2","find","_context3","findOne","$all","params","firstUserId","secondUserId","module","exports"],"mappings":"aAAA,IAAMA,OAASC,QAAQ,WAAWC,SAC5BC,aAAeF,QAAQ,0BAA7BD,OAAMG,KAAAA,IAAY,SAAGF,EAAQG,GAAX,IAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAIRN,EAAkB,IAAIF,aAAa,CACrCS,QAAS,CAACC,EAAIC,KAAKC,SAAUF,EAAIC,KAAKE,cAL5BP,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAU,MAGDZ,EAAAa,QAHC,KAAA,EAGDZ,EAHCG,EAAAU,KAGDf,EAAAgB,OAAA,KAAAC,KAAAf,GAHCG,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAa,GAAAb,EAAA,MAAA,GAGDL,EAAAgB,OAAA,KAAAC,KAAAZ,EAAAa,IAHC,KAAA,GAAA,IAAA,MAAA,OAAAb,EAAAc,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAkBlBvB,OAAOwB,IAAI,WAAY,SAAOX,EAAKT,GAAZ,IAAAqB,EAAA,OAAAlB,mBAAAC,MAAA,SAAAkB,GAAA,OAAA,OAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,KAAA,EAAA,OAAAe,EAAAhB,KAAA,EAAAgB,EAAAf,KAAA,EAAAJ,mBAAAU,MAfNd,aAAAwB,KAAA,CAMTvB,QAAIgB,CAAAA,IAAJ,CAAAP,EAAgBQ,OAAKf,YASN,KAAA,EAVTA,EAUSoB,EAAAP,KAfNf,EAAAgB,OAAA,KAAAC,KAAAI,GAeMC,EAAAf,KAAA,GAAA,MAAA,KAAA,EAAAe,EAAAhB,KAAA,EAAAgB,EAAAJ,GAAAI,EAAA,MAAA,GAfNtB,EAAAgB,OAAA,KAAAC,KAAAK,EAAAJ,IAeM,KAAA,GAAA,IAAA,MAAA,OAAAI,EAAAH,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAfNvB,OAAAwB,IAAA,mCAAA,SAAAX,EAAAT,GAAA,IAAAqB,EAAA,OAAAlB,mBAAAC,MAAA,SAAAoB,GAAA,OAAA,OAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,KAAA,EAAA,OAAAiB,EAAAlB,KAAA,EAAAkB,EAAAjB,KAAA,EAAAJ,mBAAAU,MAAAd,aAAA0B,QAAA,CAAAjB,QAAA,CAAAkB,KAAA,CAAAjB,EAAAkB,OAAAC,YAAAnB,EAAAkB,OAAAE,kBAAA,KAAA,EAAAR,EAAAG,EAAAT,KAkCXf,EAAIgB,OAAO,KAAKC,KAAKI,GAlCVG,EAAAjB,KAAA,GAAA,MAAA,KAAA,EAAAiB,EAAAlB,KAAA,EAAAkB,EAAAN,GAAAM,EAAA,MAAA,GAeMxB,EAAAgB,OAAA,KAAAC,KAAAO,EAAAN,IAfN,KAAA,GAAA,IAAA,MAAA,OAAAM,EAAAL,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAeMW,OAAAC,QAAAnC","file":"conversations.min.js","sourcesContent":["const router = require(\"express\").Router();\r\nconst Conversation = require(\"../models/Conversation\");\r\n\r\n//new conversation\r\nrouter.post(\"/\", async (req, res) =>{\r\n    const newConversation = new Conversation({\r\n        members: [req.body.senderId, req.body.receiverId],\r\n    });\r\n    try {\r\n        const savedConversation = await newConversation.save();\r\n        res.status(200).json(savedConversation);\r\n    } catch (err) {\r\n        res.status(500).json(err);\r\n    }\r\n})\r\n\r\n\r\n//get conversation of a user\r\n\r\nrouter.get(\"/:userId\", async (req, res) => {\r\n    try {\r\n      const conversation = await Conversation.find({\r\n        members: { $in: [req.params.userId] },\r\n      });\r\n      res.status(200).json(conversation);\r\n    } catch (err) {\r\n      res.status(500).json(err);\r\n    }\r\n  });\r\n\r\n\r\n  // get conversation includes two userId\r\n\r\nrouter.get(\"/find/:firstUserId/:secondUserId\", async (req, res) => {\r\n    try {\r\n      const conversation = await Conversation.findOne({\r\n        members: { $all: [req.params.firstUserId, req.params.secondUserId] },\r\n      });\r\n      res.status(200).json(conversation)\r\n    } catch (err) {\r\n      res.status(500).json(err);\r\n    }\r\n  });\r\n\r\n\r\nmodule.exports = router;"]}