{"version":3,"sources":["users.js"],"names":["User","require","router","Router","bcrypt","put","req","res","salt","regeneratorRuntime","async","_context","prev","next","params","id","body","isAdmin","password","awrap","genSalt","sent","hash","t0","abrupt","status","json","err","findByIdAndUpdate","userId","t1","stop","_context2","findByIdAndDelete","get","username","user","_user$_doc","other","_context3","query","findById","findOne","_doc","updatedAt","_objectWithoutProperties","friends","friendList","_context4","Promise","all","followings","map","friendId","friend","_id","profilePicture","push","currentUser","_context5","followers","includes","updateOne","$push","_context6","$pull","module","exports"],"mappings":"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","file":"users.min.js","sourcesContent":["const User = require(\"../models/User\");\r\nconst router = require(\"express\").Router();\r\nconst bcrypt = require(\"bcrypt\")\r\n\r\n//update user\r\nrouter.put(\"/:id\", async(req, res) =>{\r\n    if(req.body.userId == req.params.id || req.body.isAdmin){\r\n\r\n        if(req.body.password){\r\n            try {\r\n                const salt = await bcrypt.genSalt(10);\r\n                req.body.password = await bcrypt.hash(req.body.password, salt);\r\n            } catch (error) {\r\n                return res.status(500).json(err);\r\n            }\r\n        }\r\n\r\n        try {\r\n            const user = await User.findByIdAndUpdate(req.params.id, {\r\n                $set: req.body,\r\n            });\r\n            res.status(200).json(\"Account has been updated.\")\r\n        } catch (err) {\r\n            return res.status(500).json(err);\r\n        }\r\n    }else{\r\n        return res.status(403).json(\"You cannot update this account because you are not the admin\");\r\n    }\r\n});\r\n//delete user\r\nrouter.delete(\"/:id\", async(req, res) =>{\r\n    if(req.body.userId == req.params.id || req.body.isAdmin){\r\n\r\n        if(req.body.password){\r\n            try {\r\n                const salt = await bcrypt.genSalt(10);\r\n                req.body.password = await bcrypt.hash(req.body.password, salt);\r\n            } catch (error) {\r\n                return res.status(500).json(err);\r\n            }\r\n        }\r\n\r\n        try {\r\n            const user = await User.findByIdAndDelete(req.params.id);\r\n            res.status(200).json(\"Account has been deleted successfully.\")\r\n        } catch (err) {\r\n            return res.status(500).json(err);\r\n        }\r\n    }else{\r\n        return res.status(403).json(\"You cannot delete this account because you are not the admin\");\r\n    }\r\n})\r\n//get a particular user\r\nrouter.get(\"/\", async(req, res) =>{\r\n  const userId = req.query.userId;\r\n  const username = req.query.username;\r\n\r\n    try {\r\n        const user = userId ? await User.findById(userId): await User.findOne({username: username});\r\n        const {password, updatedAt, ...other} = user._doc\r\n        res.status(200).json(other);\r\n    } catch (err) {\r\n        res.status(500).json(err);\r\n    }\r\n});\r\n\r\n//get friends\r\nrouter.get(\"/friends/:userId\", async (req, res) => {\r\n  try {\r\n    const user = await User.findById(req.params.userId);\r\n    const friends = await Promise.all(\r\n      user.followings.map((friendId) => {\r\n        return User.findById(friendId);\r\n      })\r\n    );\r\n    let friendList = [];\r\n    friends.map((friend) => {\r\n      const { _id, username, profilePicture } = friend;\r\n      friendList.push({ _id, username, profilePicture });\r\n    });\r\n    res.status(200).json(friendList)\r\n  } catch (err) {\r\n    res.status(500).json(err);\r\n  }\r\n});\r\n//follow a user\r\n//follow a user\r\n\r\nrouter.put(\"/:id/follow\", async (req, res) => {\r\n  if (req.body.userId !== req.params.id) {\r\n    try {\r\n      const user = await User.findById(req.params.id);\r\n      const currentUser = await User.findById(req.body.userId);\r\n      if (!user.followers.includes(req.body.userId)) {\r\n        await user.updateOne({ $push: { followers: req.body.userId } });\r\n        await currentUser.updateOne({ $push: { followings: req.params.id } });\r\n        res.status(200).json(\"user has been followed\");\r\n      } else {\r\n        res.status(403).json(\"you allready follow this user\");\r\n      }\r\n    } catch (err) {\r\n      res.status(500).json(err);\r\n    }\r\n  } else {\r\n    res.status(403).json(\"you cant follow yourself\");\r\n  }\r\n});\r\n\r\n//unfollow a user\r\n\r\nrouter.put(\"/:id/unfollow\", async (req, res) => {\r\n  if (req.body.userId !== req.params.id) {\r\n    try {\r\n      const user = await User.findById(req.params.id);\r\n      const currentUser = await User.findById(req.body.userId);\r\n      if (user.followers.includes(req.body.userId)) {\r\n        await user.updateOne({ $pull: { followers: req.body.userId } });\r\n        await currentUser.updateOne({ $pull: { followings: req.params.id } });\r\n        res.status(200).json(\"user has been unfollowed\");\r\n      } else {\r\n        res.status(403).json(\"you dont follow this user\");\r\n      }\r\n    } catch (err) {\r\n      res.status(500).json(err);\r\n    }\r\n  } else {\r\n    res.status(403).json(\"you cant unfollow yourself\");\r\n  }\r\n});\r\nmodule.exports = router"]}