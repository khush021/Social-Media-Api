{"version":3,"sources":["conversations.js"],"names":["router","require","Router","Conversation","post","req","res","newConversation","members","body","senderId","receiverId","save","savedConversation","status","json","get","find","$in","params","userId","conversation","findOne","$all","firstUserId","secondUserId","module","exports"],"mappings":";;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBC,MAAnB,EAAf;;AACA,IAAMC,YAAY,GAAGF,OAAO,CAAC,wBAAD,CAA5B,C,CAEA;;;AACAD,MAAM,CAACI,IAAP,CAAY,GAAZ,EAAiB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,UAAAA,eADO,GACW,IAAIJ,YAAJ,CAAiB;AACrCK,YAAAA,OAAO,EAAE,CAACH,GAAG,CAACI,IAAJ,CAASC,QAAV,EAAoBL,GAAG,CAACI,IAAJ,CAASE,UAA7B;AAD4B,WAAjB,CADX;AAAA;AAAA;AAAA,0CAKuBJ,eAAe,CAACK,IAAhB,EALvB;;AAAA;AAKHC,UAAAA,iBALG;AAMTP,UAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,iBAArB;AANS;AAAA;;AAAA;AAAA;AAAA;AAQTP,UAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;;AARS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB,E,CAaA;;AAEAf,MAAM,CAACgB,GAAP,CAAW,UAAX,EAAuB,kBAAOX,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEUH,YAAY,CAACc,IAAb,CAAkB;AAC3CT,YAAAA,OAAO,EAAE;AAAEU,cAAAA,GAAG,EAAE,CAACb,GAAG,CAACc,MAAJ,CAAWC,MAAZ;AAAP;AADkC,WAAlB,CAFV;;AAAA;AAEXC,UAAAA,YAFW;AAKjBf,UAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBM,YAArB;AALiB;AAAA;;AAAA;AAAA;AAAA;AAOjBf,UAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;;AAPiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB,E,CAYE;;AAEFf,MAAM,CAACgB,GAAP,CAAW,kCAAX,EAA+C,kBAAOX,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEdH,YAAY,CAACmB,OAAb,CAAqB;AAC9Cd,YAAAA,OAAO,EAAE;AAAEe,cAAAA,IAAI,EAAE,CAAClB,GAAG,CAACc,MAAJ,CAAWK,WAAZ,EAAyBnB,GAAG,CAACc,MAAJ,CAAWM,YAApC;AAAR;AADqC,WAArB,CAFc;;AAAA;AAEnCJ,UAAAA,YAFmC;AAKzCf,UAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBM,YAArB;AALyC;AAAA;;AAAA;AAAA;AAAA;AAOzCf,UAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;;AAPyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA/C;AAYAW,MAAM,CAACC,OAAP,GAAiB3B,MAAjB","sourcesContent":["const router = require(\"express\").Router();\r\nconst Conversation = require(\"../models/Conversation\");\r\n\r\n//new conversation\r\nrouter.post(\"/\", async (req, res) =>{\r\n    const newConversation = new Conversation({\r\n        members: [req.body.senderId, req.body.receiverId],\r\n    });\r\n    try {\r\n        const savedConversation = await newConversation.save();\r\n        res.status(200).json(savedConversation);\r\n    } catch (err) {\r\n        res.status(500).json(err);\r\n    }\r\n})\r\n\r\n\r\n//get conversation of a user\r\n\r\nrouter.get(\"/:userId\", async (req, res) => {\r\n    try {\r\n      const conversation = await Conversation.find({\r\n        members: { $in: [req.params.userId] },\r\n      });\r\n      res.status(200).json(conversation);\r\n    } catch (err) {\r\n      res.status(500).json(err);\r\n    }\r\n  });\r\n\r\n\r\n  // get conversation includes two userId\r\n\r\nrouter.get(\"/find/:firstUserId/:secondUserId\", async (req, res) => {\r\n    try {\r\n      const conversation = await Conversation.findOne({\r\n        members: { $all: [req.params.firstUserId, req.params.secondUserId] },\r\n      });\r\n      res.status(200).json(conversation)\r\n    } catch (err) {\r\n      res.status(500).json(err);\r\n    }\r\n  });\r\n\r\n\r\nmodule.exports = router;"],"file":"conversations.dev.js"}