{"version":3,"sources":["posts.js"],"names":["Post","require","router","Router","User","post","req","res","newPost","body","save","savedPost","status","json","put","findById","params","id","userId","updateOne","$set","deleteOne","likes","includes","$push","$pull","get","currentUser","find","_id","userPosts","Promise","all","followings","map","friendId","friendPosts","concat","findOne","username","user","posts","module","exports"],"mappings":"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","sourcesContent":["const Post = require(\"../models/Post\");\r\nconst router = require(\"express\").Router();\r\nconst User = require(\"../models/User\");\r\n\r\n//create a post \r\nrouter.post(\"/\", async (req, res) => {\r\n    const newPost = new Post(req.body);\r\n    try {\r\n      const savedPost = await newPost.save();\r\n      res.status(200).json(savedPost);\r\n    } catch (err) {\r\n      res.status(500).json(err);\r\n    }\r\n  });\r\n//update a post\r\n\r\nrouter.put(\"/:id\", async (req, res) => {\r\n    try {\r\n      const post = await Post.findById(req.params.id);\r\n      if (post.userId === req.body.userId) {\r\n        await post.updateOne({ $set: req.body });\r\n        res.status(200).json(\"Post has been updated successfully\");\r\n      } else {\r\n        res.status(403).json(\"You cannot update other's post\");\r\n      }\r\n    } catch (err) {\r\n      res.status(500).json(err);\r\n    }\r\n  });\r\n//delete a post\r\nrouter.delete(\"/:id\", async (req, res) => {\r\n  try {\r\n    const post = await Post.findById(req.params.id);\r\n    if (post.userId === req.body.userId) {\r\n      await post.deleteOne();\r\n      res.status(200).json(\"Post has been deleted successfully.\");\r\n    } else {\r\n      res.status(403).json(\"You cannot delete other's post\");\r\n    }\r\n  } catch (err) {\r\n    res.status(500).json(err);\r\n  }\r\n});\r\n//like / dislike a post\r\nrouter.put(\"/:id/like\", async (req, res)=>{\r\n  try {\r\n    const post = await Post.findById(req.params.id);\r\n    if (!post.likes.includes(req.body.userId)) {\r\n      await post.updateOne({ $push: { likes: req.body.userId } });\r\n      res.status(200).json(\"Post has been liked successfully.\");\r\n    } else {\r\n      await post.updateOne({ $pull: { likes: req.body.userId } });\r\n      res.status(200).json(\"Post has been disliked successfully.\");\r\n    }\r\n  } catch (err) {\r\n    res.status(500).json(err);\r\n  }\r\n});\r\n//get a post\r\n\r\nrouter.get(\"/:id\", async (req, res) => {\r\n  try {\r\n    const post = await Post.findById(req.params.id);\r\n    res.status(200).json(post);\r\n  } catch (err) {\r\n    res.status(500).json(err);\r\n  }\r\n});\r\n\r\n//get timeline posts\r\n\r\nrouter.get(\"/timeline/:userId\", async (req, res) => {\r\n  try {\r\n    const currentUser = await User.findById(req.params.userId);\r\n    const userPosts = await Post.find({ userId: currentUser._id });\r\n    const friendPosts = await Promise.all(\r\n      currentUser.followings.map((friendId) => {\r\n        return Post.find({ userId: friendId });\r\n      })\r\n    );\r\n    res.status(200).json(userPosts.concat(...friendPosts))\r\n  } catch (err) {\r\n    res.status(500).json(err);\r\n  }\r\n});\r\n\r\n\r\n//get user's all posts\r\n\r\nrouter.get(\"/profile/:username\", async (req, res) => {\r\n  try {\r\n    const user = await User.findOne({username: req.params.username})\r\n    const posts = await Post.find({userId:user._id});\r\n    res.status(200).json(posts);\r\n  } catch (err) {\r\n    res.status(500).json(err);\r\n  }\r\n});\r\n\r\nmodule.exports = router;"],"file":"posts.dev.js"}